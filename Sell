local Players = game:GetService("Players")
local player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- GUI Setup
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "AutoFarmGui"

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 250, 0, 100)
frame.Position = UDim2.new(0.5, -125, 0.1, 0)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Active = true

-- Drag Support
local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- UI Elements
local topLabel = Instance.new("TextLabel", frame)
topLabel.Size = UDim2.new(1, 0, 0.2, 0)
topLabel.Position = UDim2.new(0, 0, 0, 0)
topLabel.Text = "Reborn One Click"
topLabel.Font = Enum.Font.SourceSansBold
topLabel.TextSize = 30
topLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
topLabel.BackgroundTransparency = 1

local toggleButton = Instance.new("TextButton", frame)
toggleButton.Size = UDim2.new(0.5, 0, 0.3, 0)
toggleButton.Position = UDim2.new(0.25, 0, 0.35, 0)
toggleButton.Text = "OFF"
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 18
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)

local statusLabel = Instance.new("TextLabel", frame)
statusLabel.Size = UDim2.new(1, 0, 0.25, 0)
statusLabel.Position = UDim2.new(0, 0, 0.7, 0)
statusLabel.Text = "Auto-Sell: Disabled | Class: None"
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 14
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.BackgroundTransparency = 1

local closeButton = Instance.new("TextButton", frame)
closeButton.Size = UDim2.new(0, 24, 0, 24)
closeButton.Position = UDim2.new(1, -28, 0, 4)
closeButton.Text = "X"
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
closeButton.BorderSizePixel = 0
closeButton.MouseButton1Click:Connect(function()
    frame.Visible = false
end)

-- Auto Functions
local autoSellEnabled = false
local currentClass = nil
local muscleConnection, classCheckConnection
local runningLoops = {} -- Initialize loop tracking table

local SELL_THRESHOLDS = {
    ["Godly 1st Class"] = 1.71e59, ["Godly 2nd Class"] = 4.015e59, ["Godly 3rd Class"] = 9.8e60,
    ["Godly 4th Class"] = 1.395e62, ["Godly 5th Class"] = 3.555e62, ["Godly 6th Class"] = 9.55e63,
    ["Godly 7th Class"] = 1.11e65, ["Godly 8th Class"] = 2.995e65, ["Godly 9th Class"] = 7.75e66,
    ["1ST SUPER CLASS"] = 1.75e69, ["2ND SUPER CLASS"] = 1.06e70, ["3RD SUPER CLASS"] = 6.45e70,
    ["4TH SUPER CLASS"] = 3.995e71, ["5TH SUPER CLASS"] = 2.625e72, ["6TH SUPER CLASS"] = 1.675e73,
    ["7TH SUPER CLASS"] = 0.575e78, ["8TH SUPER CLASS"] = 3.6e78, ["9TH SUPER CLASS"] = 21.5e78,
    ["10TH SUPER CLASS"] = 132.5e78, ["11TH SUPER CLASS"] = 0.795e81,
    ["1ST ULTIMATE CLASS"] = 4.665e81, ["2ND ULTIMATE CLASS"] = 1.825e84, ["3RD ULTIMATE CLASS"] = 10.8e84,
    ["4TH ULTIMATE CLASS"] = 64.5e84, ["5TH ULTIMATE CLASS"] = 366.5e84, ["6TH ULTIMATE CLASS"] = 2.165e87,
    ["7TH ULTIMATE CLASS"] = 12.75e87, ["8TH ULTIMATE CLASS"] = 38.5e90, ["9TH ULTIMATE CLASS"] = 212.5e90,
    ["1ST SUPREME CLASS"] = 1.275e93, ["2ND SUPREME CLASS"] = 7.5e93, ["3RD SUPREME CLASS"] = 44.75e93,
    ["4TH SUPREME CLASS"] = 262.5e93, ["5TH SUPREME CLASS"] = 8.45e96, ["6TH SUPREME CLASS"] = 50e96,
    ["7TH SUPREME CLASS"] = 297.5e96, ["8TH SUPREME CLASS"] = 1.875e99, ["9TH SUPREME CLASS"] = 11.5e99,
    ["ULTIMATE SUPREME CLASS"] = 77.5e99
}

local CLASS_HIERARCHY = {}
for className in pairs(SELL_THRESHOLDS) do
    table.insert(CLASS_HIERARCHY, className)
end
table.sort(CLASS_HIERARCHY, function(a, b)
    return SELL_THRESHOLDS[a] < SELL_THRESHOLDS[b]
end)

local function hasItem(itemName)
    -- Check backpack
    local backpack = player:FindFirstChild("Backpack")
    if backpack and backpack:FindFirstChild(itemName) then 
        return true 
    end

    -- Check character
    local character = player.Character
    if character then
        -- Check for tools directly in character
        if character:FindFirstChild(itemName) then
            return true
        end

        -- Check humanoid equipped tool
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local equippedTool = humanoid:FindFirstChildOfClass("Tool")
            if equippedTool and equippedTool.Name == itemName then
                return true
            end
        end
    end

    -- Check workspace Origin_Uron
    local originUron = workspace:FindFirstChild("Origin_Uron")
    if originUron then
        for _, item in ipairs(originUron:GetDescendants()) do
            if item.Name == itemName and item:IsA("BasePart") then
                return true
            end
        end
    end

    return false
end



local function updateCurrentClass()
    for i = #CLASS_HIERARCHY, 1, -1 do
        if hasItem(CLASS_HIERARCHY[i]) then
            currentClass = CLASS_HIERARCHY[i]
            statusLabel.Text = "Auto-Sell: "..(autoSellEnabled and "Enabled" or "Disabled").." | Class: "..currentClass
            return
        end
    end
    currentClass = nil
    statusLabel.Text = "Auto-Sell: "..(autoSellEnabled and "Enabled" or "Disabled").." | Class: None"
end

local function checkAndSellMuscle()
    if not currentClass then 
        print("No class detected - can't sell")
        return 
    end
    
    local leaderstats = player:FindFirstChild("leaderstats")
    if not leaderstats then
        print("Leaderstats not found!")
        return
    end
    
    local muscle = leaderstats:FindFirstChild("Muscle")
    if not muscle then
        print("Muscle value not found!")
        return
    end
    
    local threshold = SELL_THRESHOLDS[currentClass]
    print("Muscle Check:", muscle.Value, "/", threshold)
    
    if muscle.Value >= threshold then
        local args = {
            [1] = {
                [1] = "SellMuscle"
            }
        }
        
        print("Attempting to sell muscle...")
        local success, err = pcall(function()
            ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
        end)
        
        if success then
            print("Successfully sold muscle!")
        else
            print("Sell failed:", err)
        end
    end
end
local function startClassChecker()
    if classCheckConnection then classCheckConnection:Disconnect() end
    classCheckConnection = RunService.Heartbeat:Connect(function()
        pcall(updateCurrentClass)
    end)
end

-- Tool Management
local blacklist = {"Athena", "Cronus", "Hades", "Hercules", "Poseidon", "Zeus", "Ares", "Fist", "Foot"}

local function equipTools()
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return end
    
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") and not table.find(blacklist, item.Name) then
            pcall(function()
                humanoid:EquipTool(item)
            end)
        end
    end
end

local function unequipTools()
    local character = player.Character
    if not character then return end
    
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return end
    
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") and not table.find(blacklist, tool.Name) then
            pcall(function()
                tool.Parent = backpack
            end)
        end
    end
end

local function equipFoot()
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return end
    
    local foot = backpack:FindFirstChild("Foot")
    if foot and foot:IsA("Tool") then
        pcall(function()
            humanoid:EquipTool(foot)
        end)
    end
end

-- Main Toggle with Debounce
local debounce = false

toggleButton.MouseButton1Click:Connect(function()
    if debounce then return end
    debounce = true
    
    autoSellEnabled = not autoSellEnabled
    toggleButton.Text = autoSellEnabled and "ON" or "OFF"
    toggleButton.BackgroundColor3 = autoSellEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(200, 50, 50)
    updateCurrentClass()

    if autoSellEnabled then
        -- Start monitoring systems
        startClassChecker()
        
        if player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") then
            muscleConnection = player.leaderstats.Muscle:GetPropertyChangedSignal("Value"):Connect(function()
                pcall(checkAndSellMuscle)
            end)
        end

        -- Auto Equip/Unequip
        table.insert(runningLoops, task.spawn(function()
            while autoSellEnabled do
                pcall(function()
                    if player.Character and player.Character:FindFirstChild("Humanoid") then
                        equipTools()
                        task.wait(10)
                        unequipTools()
                        task.wait(0.1)
                        equipFoot()
                        task.wait(0.5)
                        unequipTools()
                        task.wait(0.1)
                    end
                end)
                task.wait()
            end
        end))

        
        table.insert(runningLoops, task.spawn(function()
            while autoSellEnabled and task.wait() do
                pcall(function()
                    game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                end)
            end
        end))
    else
        -- Cleanup
        if muscleConnection then muscleConnection:Disconnect() end
        if classCheckConnection then classCheckConnection:Disconnect() end
        
        for _, loop in pairs(runningLoops) do
    pcall(function()
        if coroutine.status(loop) == "suspended" then
            task.cancel(loop)
        end
    end)
end

        runningLoops = {}
    end
    
    debounce = false
end)

-- Cleanup
if muscleConnection then muscleConnection:Disconnect() end
if classCheckConnection then classCheckConnection:Disconnect() end

for _, loop in pairs(runningLoops) do
    pcall(function()
        if coroutine.status(loop) == "suspended" then
            task.cancel(loop)
        end
    end)
end
runningLoops = {}

