print("Script Running")
print("Please wait, web Executors take a while to load.")
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Zelerator/ASKID/refs/heads/main/ASAIYAUI'))()

local Window = Rayfield:CreateWindow({
    Name = "Asaiya Script for No limit and Lifting Simulator [ALPHA]",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Script for NLLS",
    LoadingSubtitle = "Made by Asaiya",
    Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = Asaiya, -- Create a custom folder for your hub/game
       FileName = "Asaiya Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "https://discord.gg/mkjfWXDjBu", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Key System",
       Subtitle = "Need key to open the script",
       Note = "Join my Discord to get the Key \nhttps://discord.gg/A2mNjt4BAY", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"getfucked","0"}
        
    }
 })

 Rayfield:Notify({
    Title = "Thanks for Using My Script!",
    Content = "Join our discord server to request features!",
    Duration = 3.5,
    Image = 4483362458,
 })

 local MainTab = Window:CreateTab("💪 Automatics💪", nil)
 local TryTab = Window:CreateTab("🏝️Bloodline & Island🏝️", nil)
 local PlayerTab = Window:CreateTab("🤼Players🤼", nil)
 local SetTab = Window:CreateTab("🛠️Settings🛠️", nil)
 local MiscTab = Window:CreateTab("✅Information✅", nil)
 local player = game.Players.LocalPlayer
 local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- GUI Setup (initially hidden)
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "AutoFarmGui"
screenGui.Enabled = false

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0,250,0,100); frame.Position = UDim2.new(0.5,-125,0.1,0)
frame.BackgroundColor3 = Color3.fromRGB(40,40,40); frame.Active = true
frame.Visible = false  -- hide until Stage toggle is ON

-- Make GUI draggable anywhere
local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging, dragStart, startPos = true, input.Position, frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)
frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
end)
UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- UI Elements
local topLabel = Instance.new("TextLabel", frame)
topLabel.Size = UDim2.new(1,0,0.2,0); topLabel.Position = UDim2.new(0,0,0,0)
topLabel.Text = "Reborn One Click"; topLabel.Font = Enum.Font.SourceSansBold
topLabel.TextSize = 18; topLabel.TextColor3 = Color3.fromRGB(255,255,0); topLabel.BackgroundTransparency = 1

local toggleButton = Instance.new("TextButton", frame)
toggleButton.Size = UDim2.new(0.5,0,0.3,0); toggleButton.Position = UDim2.new(0.25,0,0.35,0)
toggleButton.Text = "OFF"; toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 18; toggleButton.TextColor3 = Color3.fromRGB(255,255,255)
toggleButton.BackgroundColor3 = Color3.fromRGB(200,50,50)

local statusLabel = Instance.new("TextLabel", frame)
statusLabel.Size = UDim2.new(1,0,0.25,0); statusLabel.Position = UDim2.new(0,0,0.7,0)
statusLabel.Text = "Auto-Sell: Disabled | Class: None"; statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 14; statusLabel.TextColor3 = Color3.fromRGB(255,255,255); statusLabel.BackgroundTransparency = 1

local closeButton = Instance.new("TextButton", frame)
closeButton.Size = UDim2.new(0,24,0,24); closeButton.Position = UDim2.new(1,-28,0,4)
closeButton.Text = "X"; closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextColor3 = Color3.fromRGB(255,255,255); closeButton.BackgroundColor3 = Color3.fromRGB(150,0,0)
closeButton.BorderSizePixel = 0
closeButton.MouseButton1Click:Connect(function() frame.Visible = false end)

-- Toggle and Logic Variables
local autoSellEnabled = false
local currentClass, muscleConnection, classCheckConnection
local autoEquipLoop, autoBuyLoop, bodyAlterLoop, autoClickLoop

-- Setup cost thresholds (50% reduced)
local SELL_THRESHOLDS = {
    ["Godly 1st Class"]=1.71e59, ["Godly 2nd Class"]=4.015e59, ["Godly 3rd Class"]=9.8e60,
    ["Godly 4th Class"]=1.395e62, ["Godly 5th Class"]=3.555e62, ["Godly 6th Class"]=9.55e63,
    ["Godly 7th Class"]=1.11e65, ["Godly 8th Class"]=2.995e65, ["Godly 9th Class"]=7.75e66,
    ["1ST SUPER CLASS"]=1.75e69, ["2ND SUPER CLASS"]=1.06e70, ["3RD SUPER CLASS"]=6.45e70,
    ["4TH SUPER CLASS"]=3.995e71, ["5TH SUPER CLASS"]=2.625e72, ["6TH SUPER CLASS"]=1.675e73,
    ["7TH SUPER CLASS"]=3.575e75, ["8TH SUPER CLASS"]=5.0e75, ["9TH SUPER CLASS"]=21.5e78,
    ["10TH SUPER CLASS"]=132.5e78, ["11TH SUPER CLASS"]=0.795e81,
    ["1ST ULTIMATE CLASS"]=4.665e81, ["2ND ULTIMATE CLASS"]=1.825e84, ["3RD ULTIMATE CLASS"]=10.8e84,
    ["4TH ULTIMATE CLASS"]=64.5e84, ["5TH ULTIMATE CLASS"]=366.5e84, ["6TH ULTIMATE CLASS"]=2.165e87,
    ["7TH ULTIMATE CLASS"]=12.75e87, ["8TH ULTIMATE CLASS"]=38.5e90, ["9TH ULTIMATE CLASS"]=212.5e90,
    ["1ST SUPREME CLASS"]=1.275e93, ["2ND SUPREME CLASS"]=7.5e93, ["3RD SUPREME CLASS"]=44.75e93,
    ["4TH SUPREME CLASS"]=262.5e93, ["5TH SUPREME CLASS"]=8.45e96, ["6TH SUPREME CLASS"]=50e96,
    ["7TH SUPREME CLASS"]=297.5e96, ["8TH SUPREME CLASS"]=1.875e99, ["9TH SUPREME CLASS"]=11.5e99,
    ["ULTIMATE SUPREME CLASS"]=77.5e99
}

local CLASS_HIERARCHY = {}
for name in pairs(SELL_THRESHOLDS) do table.insert(CLASS_HIERARCHY, name) end

-- Utility Functions
local function hasItemInBackpack(n)
    local bp = player:FindFirstChild("Backpack")
    if bp and bp:FindFirstChild(n) then return true end
    local ch = player.Character
    return ch and ch:FindFirstChild(n) ~= nil
end

local function updateCurrentClass()
    for i = #CLASS_HIERARCHY, 1, -1 do
        if hasItemInBackpack(CLASS_HIERARCHY[i]) then
            currentClass = CLASS_HIERARCHY[i]
            statusLabel.Text = "Auto-Sell: " .. (autoSellEnabled and "Enabled" or "Disabled") .. " | Class: " .. currentClass
            return
        end
    end
    currentClass = nil
    statusLabel.Text = "Auto-Sell: " .. (autoSellEnabled and "Enabled" or "Disabled") .. " | Class: None"
end

local function checkAndSellMuscle()
    if currentClass then
        local stats = player:FindFirstChild("leaderstats")
        local muscle = stats and stats:FindFirstChild("Muscle")
        if muscle and muscle.Value >= SELL_THRESHOLDS[currentClass] then
            ReplicatedStorage:RemoteEvent:FireServer({{"SellMuscle"}})
        end
    end
end

-- Auto Buy Godly+
local BLACKLIST = {"Athena","Cronus","Hades","Hercules","Poseidon","Zeus","Ares","Fist","Foot"}
local function autoEquipCycle()
    local bp = player:FindFirstChild("Backpack")
    if not bp or not player.Character then return end
    for _, tool in ipairs(bp:GetChildren()) do
        if tool:IsA("Tool") and not table.find(BLACKLIST, tool.Name) then
            player.Character:Humanoid:EquipTool(tool)
        end
    end
    task.wait(10)
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA("Tool") and not table.find(BLACKLIST, tool.Name) then
            tool.Parent = player.Backpack
        end
    end
    task.wait(0.1)
    local foot = bp:FindFirstChild("Foot")
    if foot then player.Character:Humanoid:EquipTool(foot) end
    task.wait(0.5)
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA("Tool") and not table.find(BLACKLIST, tool.Name) then
            tool.Parent = player.Backpack
        end
    end
end

local function autoBuyGodly()
    local bp = player:FindFirstChild("Backpack")
    local highest = 0
    for i,name in ipairs(CLASS_HIERARCHY) do
        if bp and bp:FindFirstChild(name) and i>=1 then highest = i end
    end
    local nextIdx = math.min(highest+1,#CLASS_HIERARCHY)
    local nextName = CLASS_HIERARCHY[nextIdx]
    if nextName and player.leaderstats and player.leaderstats:FindFirstChild("Coins") then
        local coins = player.leaderstats.Coins.Value
        -- cost: threshold *2 (since threshold = 50%)
        local fullCost = SELL_THRESHOLDS[nextName]*2
        if coins >= fullCost then
            ReplicatedStorage:RemoteEvent:FireServer({{"BuyItem","Income_Item","Weight",nextIdx}})
        end
    end
end

-- Main Toggle
toggleButton.MouseButton1Click:Connect(function()
    autoSellEnabled = not autoSellEnabled
    toggleButton.Text = autoSellEnabled and "ON" or "OFF"
    toggleButton.BackgroundColor3 = autoSellEnabled and Color3.fromRGB(50,200,50) or Color3.fromRGB(200,50,50)
    updateCurrentClass()

    if autoSellEnabled then
        screenGui.Enabled = true; frame.Visible = true

        muscleConnection = player.leaderstats.Muscle:GetPropertyChangedSignal("Value"):Connect(function()
            checkAndSellMuscle()
        end)
        classCheckConnection = RunService.Heartbeat:Connect(updateCurrentClass)
        task.spawn(function() while autoSellEnabled do autoEquipCycle() end end)
        task.spawn(function() while autoSellEnabled do autoBuyGodly(); task.wait(2) end end)
        task.spawn(function() while autoSellEnabled do
            for i=1,30 do ReplicatedStorage.RemoteEvent:FireServer({{"BuyItem","Rebirth_Item","Rebirth1",i}})
                task.wait(0.1)
            end
            task.wait(5)
        end end)
        task.spawn(function() while autoSellEnabled do
            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9,9e9))
            task.wait()
        end end)
    else
        screenGui.Enabled = false; frame.Visible = false
        if muscleConnection then muscleConnection:Disconnect() end
        if classCheckConnection then classCheckConnection:Disconnect() end
    end
end)

-- Stage 25+ One Click toggle (master switch)
-- Assuming you have UI lib `MainTab`
MainTab:CreateToggle({
    Name = "Stage 25+ One Click",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(val)
        screenGui.Enabled = val
        if not val and autoSellEnabled then
            toggleButton:CaptureFocus()
            toggleButton.MouseButton1Click:Fire() -- turn off everything
        end
    end
})

local Toggle = MainTab:CreateToggle({
    Name = "Gain Muscle + Sell If Full Storage",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        if Value then
            print("✅ Auto-Sell & Gain Muscle Enabled")
            _G.AutoSell = true
            _G.GainMuscle = true

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
            local player = game:GetService("Players").LocalPlayer
            local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") -- Change "Muscle" if needed

            local muscleHistory = {} -- Store the last 5 seconds of muscle values
            local historyLength = 3 -- Track the last 5 values (1 per second)

            -- Muscle Gaining Loop
            spawn(function()
                while _G.GainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    remoteEvent:FireServer(unpack(args))
                    task.wait(0.45) -- Gains muscle every 0.4 seconds
                end
            end)

            -- Auto-Sell Loop
            spawn(function()
                while _G.AutoSell do
                    task.wait(1) -- Check every 1 second

                    if muscleStat then
                        -- Add current muscle value to history
                        table.insert(muscleHistory, muscleStat.Value)
                        if #muscleHistory > historyLength then
                            table.remove(muscleHistory, 1) -- Keep history at 5 values max
                        end

                        -- Check if all stored values are the same
                        local allSame = true
                        for i = 2, #muscleHistory do
                            if muscleHistory[i] ~= muscleHistory[i - 1] then
                                allSame = false
                                break
                            end
                        end

                        if allSame and #muscleHistory >= historyLength then
                            -- No muscle gain for 5 seconds, sell!
                            print("⚡ No muscle gain detected for 5 seconds. Selling...")
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            remoteEvent:FireServer(unpack(args))

                            -- Clear history after selling
                            muscleHistory = {}
                        end
                    else
                        print("❌ Muscle stat not found! Make sure the stat name is correct.")
                    end
                end
            end)
        else
            print("❌ Auto-Sell & Gain Muscle Disabled")
            _G.AutoSell = false
            _G.GainMuscle = false
        end
    end,
})



 

local selectedMode = "None"

local Dropdown = MainTab:CreateDropdown({
    Name = "Choose Gain Muscle",
    Options = {
        "None",
        "Gain Muscle (Fast Lifter Gamepass, No RollBack & Safe)",
        "Gain Muscle (No Gamepass)",
        "Gain Muscle (Fast Lifter Gamepass, Ridiculously fast & Unsafe)"
    },
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        -- Stop any existing loop before starting a new one
        getgenv().gain = false
        selectedMode = Option[1] -- Store the selected option
        
        -- Small wait to ensure previous loop stops completely
        task.wait(0.1)

        if selectedMode ~= "None" then
            getgenv().gain = true
            task.spawn(function()
                while getgenv().gain do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

                    -- Apply the correct wait time based on selection
                    if selectedMode == "Gain Muscle (No Gamepass)" then
                        task.wait(0.7)
                    elseif selectedMode == "Gain Muscle (Fast Lifter Gamepass, Ridiculously fast & Unsafe)" then
                        task.wait() -- No delay (instant execution)
                    elseif selectedMode == "Gain Muscle (Fast Lifter Gamepass, No RollBack & Safe)" then
                        task.wait(0.45)
                    end
                end
            end)
        end
    end
})


local selectedSellMode = "None"
        
local Dropdown = MainTab:CreateDropdown({
    Name = "Auto Sell Muscle",
    Options = {
        "None",
        "Instant",
        "Half Second",
        "Every 1 Second",
        "Every 3 Seconds",
        "Every 5 Seconds",
        "Every 10 Seconds",
        "Every 15 Seconds",
        "Every 30 Seconds",
        "Every 60 Seconds",
        "Every 5 Minutes",
        "Every 1 Hour",
        "Sell If Full"  -- Added the new option here
    },
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown2",
    Callback = function(Option)
        getgenv().Sell = false
        _G.AutoSell = false
        _G.GainMuscle = false
        selectedSellMode = Option[1] 

        task.wait(0.1)

        if selectedSellMode ~= "None" then
            if selectedSellMode == "Sell If Full" then
                -- Handle Sell If Full mode
                _G.AutoSell = true
                _G.GainMuscle = true
                print("✅ Auto-Sell & Gain Muscle (Sell If Full) Enabled")
                
                local replicatedStorage = game:GetService("ReplicatedStorage")
                local remoteEvent = replicatedStorage:WaitForChild("RemoteEvent")
                local player = game:GetService("Players").LocalPlayer
                local muscleStat = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Muscle") -- Change "Muscle" if needed

                local muscleHistory = {} -- Store the last 5 seconds of muscle values
                local historyLength = 3 -- Track the last 5 values (1 per second)

                -- Muscle Gaining Loop
                spawn(function()
                    while _G.GainMuscle do
                        local args = {
                            [1] = {
                                [1] = "GainMuscle"
                            }
                        }
                        remoteEvent:FireServer(unpack(args))
                        task.wait(15) -- Gains muscle every 0.4 seconds
                    end
                end)

                -- Auto-Sell Loop
                spawn(function()
                    while _G.AutoSell do
                        task.wait(1) -- Check every 1 second

                        if muscleStat then
                            -- Add current muscle value to history
                            table.insert(muscleHistory, muscleStat.Value)
                            if #muscleHistory > historyLength then
                                table.remove(muscleHistory, 1) -- Keep history at 5 values max
                            end

                            -- Check if all stored values are the same
                            local allSame = true
                            for i = 2, #muscleHistory do
                                if muscleHistory[i] ~= muscleHistory[i - 1] then
                                    allSame = false
                                    break
                                end
                            end

                            if allSame and #muscleHistory >= historyLength then
                                -- No muscle gain for 5 seconds, sell!
                                print("⚡ No muscle gain detected for 5 seconds. Selling...")
                                local args = {
                                    [1] = {
                                        [1] = "SellMuscle"
                                    }
                                }
                                remoteEvent:FireServer(unpack(args))

                                -- Clear history after selling
                                muscleHistory = {}
                            end
                        else
                            print("❌ Muscle stat not found! Make sure the stat name is correct.")
                        end
                    end
                end)
            else
                -- Handle all other timer-based sell modes
                getgenv().Sell = true
                task.spawn(function()
                    local lastSellTime = tick() -- Get the current time
                    local interval = 0
                    if     selectedSellMode == "Instant" then
                        interval = 0.1
                    elseif     selectedSellMode == "Half second" then
                            interval = 0.6
                    elseif selectedSellMode == "Every 1 Second" then
                        interval = 1
                    elseif selectedSellMode == "Every 3 Seconds" then
                        interval = 3
                    elseif selectedSellMode == "Every 5 Seconds" then
                        interval = 5
                    elseif selectedSellMode == "Every 10 Seconds" then 
                        interval = 10
                    elseif selectedSellMode == "Every 15 Seconds" then 
                        interval = 15
                    elseif selectedSellMode == "Every 30 Seconds" then
                        interval = 30
                    elseif selectedSellMode == "Every 60 Seconds" then
                        interval = 60
                    elseif selectedSellMode == "Every 5 Minutes" then
                        interval = 300
                    elseif selectedSellMode == "Every 1 Hour" then
                        interval = 3600
                    end

                    while getgenv().Sell do
                        if tick() - lastSellTime >= interval then
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                            lastSellTime = tick() -- Reset timer after selling
                        end
                        task.wait(0.1) -- Small wait to prevent unnecessary CPU usage
                    end
                end)
            end
        end
    end
})


local Toggle = MainTab:CreateToggle({
Name = "Auto buy Weight",
CurrentValue = false,
Flag = "Toggle4",
Callback = function(Value)
    getgenv().BuyWeight = Value
    while getgenv().BuyWeight do
        -- Get the player's backpack and character
        local player = game.Players.LocalPlayer
        local backpack = player:FindFirstChild("Backpack") or {}
        local character = player.Character or player.CharacterAdded:Wait()
        
        -- Define the weight progression
        local weightOrder = {
            "Pencil", "Stick", "Mouse", "Water", "Soccer Ball", "Bottle", "Textbook",
            "Bucket", "Wood", "Guitar", "Unavailable", "Chair", "Cart", "TV", 
            "Bicycle", "Desk", "Bed", "Log", "Canoe", "Tyre", "Refrigerator", "Drum",
            "Hydrant", "Piano", "Motorcycle", "Safe", "Flag", "ATM", "RX-7", "EVO",
            "G-Class", "Van", "Tree", "Container", "Sailboat", "Bus", "Truck", "Windmill",
            "Jet", "Tank", "Transport Helicopter", "Battleship", "Spaceship", "Speaker",
            "Anchor", "Old House", "Building", "Toxic Tank", "Rocket", "Castle",
            "Torpedo", "Signal Tower", "Stone Altar", "UFO", "Ancient Place", "Pyramid",
            "Canyon Mt.", "Mountain", "Volcano", "Mt. Fuji", "Meteorite", "Moon",
            "Mercury", "Mars", "Saturn", "Jupiter", "Super Saturn", "Sedna Bar", "Sun",
            "Mini Galaxy", "Earth Bar", "Black Hole", "Four Dimensions", "Sun Bar", 
            "Holy Star", "Meteoroids Ring", "Meteor Bar", "Water Sphere", "Super Meteorite",
            "Cross Stars", "Fiery Star", "Super Venus", "Atomic Suns", "Lightning Cube",
            "Atmosphere", "Five Dimensions", "Space Stone", "Universe", "Mind Stone",
            "Reality Stone", "Soul Stone", "Time Stone", "Power Stone", "Cosmo Bar",
            "Galaxy Bar", "Universe Bar", "Sharkupiter", "Giftune", "Aurora Way", "Eternity",
            "Cashensione", "Past", "Future", "Infection", "Mutation", "Godly 1st Class",
            "Godly 2nd Class", "Godly 3rd Class", "Godly 4th Class", "Godly 5th Class",
            "Godly 6th Class", "Godly 7th Class", "Godly 8th Class", "Godly 9th Class", 
            "1ST SUPER CLASS", "2ND SUPER CLASS", "3RD SUPER CLASS", "4TH SUPER CLASS",
            "5TH SUPER CLASS", "6TH SUPER CLASS", "7TH SUPER CLASS", "8TH SUPER CLASS",
            "9TH SUPER CLASS", "10TH SUPER CLASS", "11TH SUPER CLASS", "1ST ULTIMATE CLASS",
            "2ND ULTIMATE CLASS", "3RD ULTIMATE CLASS", "4TH ULTIMATE CLASS", 
            "5TH ULTIMATE CLASS", "6TH ULTIMATE CLASS", "7TH ULTIMATE CLASS", 
            "8TH ULTIMATE CLASS", "9TH ULTIMATE CLASS", "1ST SUPREME CLASS", 
            "2ND SUPREME CLASS", "3RD SUPREME CLASS", "4TH SUPREME CLASS", "5TH SUPREME CLASS",
            "6TH SUPREME CLASS", "7TH SUPREME CLASS", "8TH SUPREME CLASS", "9TH SUPREME CLASS", "ULTIMATE SUPREME CLASS"
        }

        -- Function to check if player has a weight (either in backpack or equipped)
        local function hasWeight(weightName)
            -- Check backpack
            if backpack:FindFirstChild(weightName) then
                return true
            end
            -- Check character
            if character and character:FindFirstChild(weightName) then
                return true
            end
            return false
        end

        -- Find the highest weight the player has
        local highestWeightIndex = 0
        for i, weightName in ipairs(weightOrder) do
            if hasWeight(weightName) then
                highestWeightIndex = i
            end
        end

        -- Determine the next weight to buy
        local nextWeightIndex = highestWeightIndex + 1

        -- Skip "Unavailable" entry
        while weightOrder[nextWeightIndex] == "Unavailable" do
            nextWeightIndex = nextWeightIndex + 1
        end

        if nextWeightIndex > #weightOrder then
            print("Player has all weights!")
            getgenv().BuyWeight = false
            Toggle:Set(false)
            return
        end

        -- Buy the next weight
        print("Attempting to buy weight: "..weightOrder[nextWeightIndex])
        local args = {
            [1] = {"BuyItem", "Income_Item", "Weight", nextWeightIndex}
        }
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))

        task.wait(1) -- Adjust delay as needed
    end
end
})
 

 local ReplicatedStorage = game:GetService("ReplicatedStorage")

 local Toggle = MainTab:CreateToggle({
    Name = "Auto Body Alter",
    CurrentValue = false,
    Flag = "Toggle5", 
    Callback = function(Value)
        getgenv().BuyAlter = Value

        while getgenv().BuyAlter do
            for i = 1, 30 do
                if not getgenv().BuyAlter then break end -- Exit loop if toggle is off

                local args = {
                    [1] = {
                        [1] = "BuyItem",
                        [2] = "Rebirth_Item",
                        [3] = "Rebirth1",
                        [4] = i
                    }
                }

                ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
                wait(0.1) -- Prevents excessive requests
            end
            wait(5) -- Delay to prevent spamming the loop after the for loop completes
        end
    end
})


local Toggle = MainTab:CreateToggle({
    Name = "Smart Weight",
    CurrentValue = false,
    Flag = "Toggle6",
    Callback = function(Value)
        getgenv().SmartWeight = Value

        if Value then
            task.spawn(function()
                while getgenv().SmartWeight do  
                    -- Ensure leaderstats and Stage exist
                    if not player.leaderstats or not player.leaderstats:FindFirstChild("Stage") then
                        warn("Stage not found in leaderstats!")
                        return
                    end

                    local stage = player.leaderstats.Stage.Value
                    local maxWeight = 21  -- Default max weight for Stage 0

                    -- Define max weight based on the player's stage
                    if stage == 1 then maxWeight = 27
                    elseif stage == 2 then maxWeight = 32
                    elseif stage == 3 then maxWeight = 37
                    elseif stage == 4 then maxWeight = 41
                    elseif stage == 5 then maxWeight = 46
                    elseif stage == 6 then maxWeight = 51
                    elseif stage == 7 then maxWeight = 56
                    elseif stage == 8 then maxWeight = 61
                    elseif stage == 9 then maxWeight = 64
                    elseif stage == 10 then maxWeight = 69
                    elseif stage == 11 then maxWeight = 72
                    elseif stage == 12 then maxWeight = 75
                    elseif stage == 13 then maxWeight = 78
                    elseif stage == 14 then maxWeight = 81
                    elseif stage == 15 then maxWeight = 84
                    elseif stage == 16 then maxWeight = 87
                    elseif stage == 17 then maxWeight = 90
                    elseif stage == 18 then maxWeight = 93
                    elseif stage == 19 then maxWeight = 96
                    elseif stage == 20 then maxWeight = 99
                    elseif stage == 21 then maxWeight = 102
                    elseif stage == 22 then maxWeight = 105
                    elseif stage == 23 then maxWeight = 108
                    elseif stage == 24 then maxWeight = 111
                    elseif stage == 25 then maxWeight = 114
                    elseif stage == 26 then maxWeight = 120
                    elseif stage == 27 then maxWeight = 126
                    elseif stage == 28 then maxWeight = 132
                    elseif stage == 29 then maxWeight = 138
                    elseif stage > 30 then maxWeight = 144 -- Example for high-stage players
                    end

                    -- Buy weights up to maxWeight
                    for i = 2, maxWeight do
                        if not getgenv().SmartWeight then return end

                        print("Attempting to buy weight: ", i)
                        local args = {
                            [1] = {"BuyItem", "Income_Item", "Weight", i}
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end

                    task.wait(1) -- Delay before the next cycle
                end
            end)
        end
    end
})

local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Toggle = MainTab:CreateToggle({
    Name = "Smart DNA",
    CurrentValue = false,
    Flag = "Toggle7",
    Callback = function(Value)
        getgenv().BuyDNA = Value

        if Value then
            task.spawn(function()  -- Runs in a separate thread
                while getgenv().BuyDNA do
                    -- Get player's current stage
                    local stage = player.leaderstats:FindFirstChild("Stage") and player.leaderstats.Stage.Value or 0

                    -- Set max DNA purchase limit based on stage
                    local maxDNA = 12
                    if stage == 1 then maxDNA = 16
                    elseif stage == 2 then maxDNA = 18
                    elseif stage == 3 then maxDNA = 37
                    elseif stage == 4 then maxDNA = 41
                    elseif stage == 5 then maxDNA = 24
                    elseif stage == 6 then maxDNA = 28
                    elseif stage == 7 then maxDNA = 30
                    elseif stage == 8 then maxDNA = 32
                    elseif stage == 9 then maxDNA = 37
                    elseif stage == 10 then maxDNA = 39
                    elseif stage == 11 then maxDNA = 43
                    elseif stage == 12 then maxDNA = 44
                    elseif stage == 13 then maxDNA = 44
                    elseif stage == 14 then maxDNA = 45
                    elseif stage == 15 then maxDNA = 46
                    elseif stage == 16 then maxDNA = 48
                    elseif stage == 17 then maxDNA = 49
                    elseif stage == 18 then maxDNA = 50
                    elseif stage == 19 then maxDNA = 51
                    elseif stage == 20 then maxDNA = 51
                    elseif stage == 21 then maxDNA = 52
                    elseif stage == 22 then maxDNA = 52
                    elseif stage == 23 then maxDNA = 53
                    elseif stage == 24 then maxDNA = 55
                    elseif stage == 25 then maxDNA = 56
                    elseif stage == 26 then maxDNA = 58
                    elseif stage == 27 then maxDNA = 60
                    elseif stage == 28 then maxDNA = 62
                    elseif stage == 29 then maxDNA = 64
                    elseif stage > 30 then maxDNA = 70
                    end

                    -- Loop through and buy DNA up to maxDNA
                    for i = 1, maxDNA do
                        if not getgenv().BuyDNA then return end -- Stops instantly

                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "DNA name",
                                [4] = i
                            }
                        }

                        ReplicatedStorage:WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

-- AUto Equip Weight
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

getgenv().AutoEquip = false
getgenv().SelectedTool = "None"

-- Function to gather all tools from the backpack
local function getToolsList()
    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    local tools = {"None"} -- Add 'None' option
    
    if inventory then
        for _, item in ipairs(inventory:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item.Name)
            end
        end
    end
    return tools
end

-- Equip selected tool
local function equipTool(selectedTool)
    if not LocalPlayer.Character then return end
    if selectedTool == "None" then return end -- Skip if 'None' is selected
    
    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    
    if inventory then
        local tool = inventory:FindFirstChild(selectedTool)
        if tool and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
        end
    end
end

-- Create dropdown menu
local Dropdown = SetTab:CreateDropdown({ 
   Name = "Auto Equip Item", 
   Options = getToolsList(),
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown3",
   Callback = function(Options)
       getgenv().AutoEquip = true
       getgenv().SelectedTool = Options[1] -- Store the selected tool
       
       task.spawn(function()
           while getgenv().AutoEquip do
               if getgenv().SelectedTool ~= "None" then
                   equipTool(getgenv().SelectedTool)
               end
               task.wait() -- Rechecks every 10 seconds
           end
       end)
   end,
})

-- Refresh the dropdown when the backpack updates
LocalPlayer.Backpack.ChildAdded:Connect(function()
    Dropdown:SetOptions(getToolsList())
end)

LocalPlayer.Backpack.ChildRemoved:Connect(function()
    Dropdown:SetOptions(getToolsList())
end)




local Toggle = SetTab:CreateToggle({
    Name = "Anti AFK KICK",
    CurrentValue = false,
    Flag = "Toggle8",
    Callback = function(Value)
        getgenv().antiafk = Value

        if Value then
            -- Run Anti-AFK logic only once
            local Players = game:GetService("Players")
            local VirtualUser = game:GetService("VirtualUser")

            local GC = getconnections or get_signal_cons
            if GC then
                for i, v in pairs(GC(Players.LocalPlayer.Idled)) do
                    if v.Disable then
                        v:Disable()
                    elseif v.Disconnect then
                        v:Disconnect()
                    end
                end
            else
                Players.LocalPlayer.Idled:Connect(function()
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end

            -- Run a controlled loop with delays
            task.spawn(function()
                while getgenv().antiafk do
                    VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                    task.wait(900) -- Wait before repeating
                end
            end)
        end
    end
})


local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker Bloodline",
    CurrentValue = false,
    Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CBloodline = Value
        while CBloodline == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                wait(12)
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker Killstreak",
    CurrentValue = false,
    Flag = "Toggle10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CKillstreak = Value
        while CKillstreak == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                wait(5)
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "Auto Clicker fast",
    CurrentValue = false,
    Flag = "Toggle11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().CFast = Value
        while CFast == true do
                game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))
                task.wait()
            end
        end,
 })

 local Toggle = SetTab:CreateToggle({
    Name = "White Screen",
    CurrentValue = false,
    Flag = "Toggle12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv()WS = Value
        if WS == true then
            game:GetService("RunService"):Set3dRenderingEnabled(false)
            elseif WS == false then
                game:GetService("RunService"):Set3dRenderingEnabled(true)
        end
    end,
 })

 local ScreenGui = nil  -- Store the ScreenGui so we can toggle it on/off

local Toggle = SetTab:CreateToggle({
    Name = "Black Screen",
    CurrentValue = false,
    Flag = "Toggle13",
    Callback = function(Value)
        if Value then
            -- Create the black screen if it doesn't exist
            if not ScreenGui then
                ScreenGui = Instance.new("ScreenGui")
                local Frame = Instance.new("Frame")

                ScreenGui.Parent = game.CoreGui
                ScreenGui.IgnoreGuiInset = true  

                Frame.Parent = ScreenGui
                Frame.Size = UDim2.new(1, 0, 1, 0)
                Frame.Position = UDim2.new(0, 0, 0, 0)
                Frame.BackgroundColor3 = Color3.new(0, 0, 0)
                Frame.BorderSizePixel = 0  
            end
        else
            -- Remove the black screen if it exists
            if ScreenGui then
                ScreenGui:Destroy()
                ScreenGui = nil
            end
        end
    end,
})

repeat wait() until game:IsLoaded()
wait(2)

-- Create GUI Elements
local ScreenGui = Instance.new("ScreenGui")

local Fps = Instance.new("TextLabel")
local Ping = Instance.new("TextLabel")

-- FPS at the Upper Right (Lowered)
Fps.Name = "Fps"
Fps.BackgroundTransparency = 1.0
Fps.Position = UDim2.new(1, -130, 0, 30) -- Moved down from 5 to 30
Fps.Size = UDim2.new(0, 125, 0, 25)
Fps.Font = Enum.Font.SourceSans
Fps.TextColor3 = Color3.fromRGB(255, 255, 255)
Fps.TextScaled = true
Fps.Text = ""

-- Ping at the Upper Left (Lowered)
Ping.Name = "Ping"
Ping.BackgroundTransparency = 1.0
Ping.Position = UDim2.new(0, 5, 0, 30) -- Moved down from 5 to 30
Ping.Size = UDim2.new(0, 125, 0, 25)
Ping.Font = Enum.Font.SourceSans
Ping.TextColor3 = Color3.fromRGB(253, 253, 253)
Ping.TextScaled = true
Ping.Text = ""

-- Parent AFTER setting properties to avoid "Label"
Fps.Parent = ScreenGui
Ping.Parent = ScreenGui
ScreenGui.Parent = game.CoreGui

-- Toggleable FPS & Ping Display
local RunService = game:GetService("RunService")
getgenv().DisplayStats = false

local function UpdateStats()
    while getgenv().DisplayStats do
        local fpsValue = math.round(1 / RunService.RenderStepped:Wait())
        local pingValue = math.round(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())

        Fps.Text = "FPS: " .. fpsValue
        Ping.Text = "Ping: " .. pingValue

        task.wait(0.5)
    end

    -- Hide text when disabled
    Fps.Text = ""
    Ping.Text = ""
end

-- Toggle UI
local Toggle = SetTab:CreateToggle({ 
    Name = "Show FPS & Ping", 
    CurrentValue = false,
    Flag = "Toggle14", 
    Callback = function(Value)
        getgenv().DisplayStats = Value
        if Value then
            task.spawn(UpdateStats)
        end
    end,
})

-- Toggle for Destroy Everything (Visual Only)
local Toggle = SetTab:CreateToggle({
    Name = "Destroy Everything",
    CurrentValue = false,
    Flag = "Toggle15",
    Callback = function(Value)
        getgenv().DestroyEverything = Value
        if Value then
            startDestroy()
        else
            restoreObjects()
        end
    end,
})

local destroyedObjects = {}

function startDestroy()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") and not obj:IsDescendantOf(game.Players.LocalPlayer.Character) then
            destroyedObjects[obj] = {Transparency = obj.Transparency, Material = obj.Material}
            obj.Transparency = 1
            obj.Material = Enum.Material.SmoothPlastic
        elseif obj:IsA("Decal") or obj:IsA("Texture") then
            destroyedObjects[obj] = true
            obj:Destroy()
        end
    end
end

function restoreObjects()
    for obj, data in pairs(destroyedObjects) do
        if obj and obj.Parent then
            if typeof(data) == "table" then
                obj.Transparency = data.Transparency
                obj.Material = data.Material
            end
        end
    end
    destroyedObjects = {}
end

-- Invsisibility
local player = game.Players.LocalPlayer
local function setTrueInvisibility(state)
    local character = player.Character or player.CharacterAdded:Wait()
    if not character then return end

    for _, v in pairs(character:GetDescendants()) do
        if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
            v.LocalTransparencyModifier = state and 1 or 0 -- Makes parts invisible
            v.CanCollide = not state -- Disables collision
            v.CanTouch = not state
            v.CanQuery = not state
        end
    end

    if character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.Anchored = state -- Prevents server from detecting movement
    end
end

local Toggle = SetTab:CreateToggle({ 
    Name = "TRUE INVISIBILITY", 
    CurrentValue = false,
    Flag = "Toggle16", 
    Callback = function(Value)
        setTrueInvisibility(Value)
    end,
})

local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")

-- Get HumanoidRootPart
local function getRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

local lockedCFrame = nil -- Store the locked position

local Toggle = SetTab:CreateToggle({ 
    Name = "Freeze Position",
    CurrentValue = false,
    Flag = "Toggle17",
    Callback = function(Value)
        local root = getRoot()
        if Value then
            lockedCFrame = root.CFrame -- Save current position
        else
            lockedCFrame = nil
        end
    end,
})

runService.RenderStepped:Connect(function()
    local root = getRoot()
    if lockedCFrame then
        root.CFrame = lockedCFrame -- Lock position
    end
end)

local player = game.Players.LocalPlayer
local nameTagHidden = false
local hideLoopRunning = false

-- Function to hide/show name tag
local function setCustomNameTagVisibility(shouldHide)
    local character = player.Character or player.CharacterAdded:Wait()
    local head = character:FindFirstChild("Head")

    if head then
        local titleGui = head:FindFirstChild("TitleGui")
        if titleGui then
            local tlName = titleGui:FindFirstChild("tlName")
            if tlName and tlName:IsA("TextLabel") then
                tlName.Visible = not shouldHide
            end

            local tlRank = titleGui:FindFirstChild("tlRank")
            if tlRank and tlRank:IsA("TextLabel") then
                tlRank.Visible = not shouldHide
            end

            local fameTxt = titleGui:FindFirstChild("FameTxt")
            if fameTxt and fameTxt:IsA("TextLabel") then
                fameTxt.Visible = not shouldHide
            end
        end
    end
end


-- Continuous hide loop
local function startHideLoop()
    if hideLoopRunning then return end
    hideLoopRunning = true

    task.spawn(function()
        while nameTagHidden do
            setCustomNameTagVisibility(true)
            task.wait(2)
        end
        hideLoopRunning = false
    end)
end

-- Toggle GUI
local Toggle = SetTab:CreateToggle({
    Name = "Hide Info",
    CurrentValue = false,
    Flag = "Toggle18",
    Callback = function(Value)
        nameTagHidden = Value

        if nameTagHidden then
            setCustomNameTagVisibility(true)
            startHideLoop()
        else
            setCustomNameTagVisibility(false)
        end
    end,
})

-- When character respawns
player.CharacterAdded:Connect(function()
    if nameTagHidden then
        task.wait(1)
        setCustomNameTagVisibility(true)
        startHideLoop()
    end
end)

-- If character exists on load
if player.Character and nameTagHidden then
    setCustomNameTagVisibility(true)
    startHideLoop()
end

local toggleGui -- forward declaration
local button
local toggled = false

local HideGUI = SetTab:CreateToggle({
    Name = "HIDE GUI",
    CurrentValue = false,
    Flag = "Toggle100",
    Callback = function(Value)
        if Value then
            -- Create GUI when toggled ON
            toggleGui = Instance.new("ScreenGui")
            toggleGui.Name = "ToggleBox"
            toggleGui.ResetOnSpawn = false
            toggleGui.Parent = game:GetService("CoreGui")

            button = Instance.new("TextButton")
            button.Size = UDim2.new(0, 40, 0, 40)
            button.Position = UDim2.new(1, -50, 1, -50)
            button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            button.TextColor3 = Color3.new(1, 1, 1)
            button.Text = "◉"
            button.Name = "ToggleButton"
            button.Parent = toggleGui
            button.Active = true
            button.Draggable = true

            toggled = false

            button.MouseButton1Click:Connect(function()
                toggled = not toggled
                for _, gui in ipairs(game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):GetChildren()) do
                    if gui:IsA("ScreenGui") and gui.Name ~= "ToggleBox" then
                        gui.Enabled = not toggled
                    end
                end
            end)
        else
            -- Destroy GUI when toggled OFF
            if toggleGui then
                toggleGui:Destroy()
                toggleGui = nil
                button = nil
            end
        end
    end,
})



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local blacklist = {"Athena", "Cronus", "Hades", "Hercules", "Poseidon", "Zeus", "Ares", "Fist", "Foot"}

getgenv().AutoEquipUnequip = false

local function equipTools()
    if not LocalPlayer.Character then return end

    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    if inventory then
        for _, item in ipairs(inventory:GetChildren()) do
            if item:IsA("Tool") and not table.find(blacklist, item.Name) then
                LocalPlayer.Character:WaitForChild("Humanoid"):EquipTool(item)
            end
        end
    end
end

local function unequipTools()
    if not LocalPlayer.Character then return end

    local character = LocalPlayer.Character
    for _, item in ipairs(character:GetChildren()) do
        if item:IsA("Tool") and not table.find(blacklist, item.Name) then
            item.Parent = LocalPlayer:FindFirstChildOfClass("Backpack")
        end
    end
end

local function equipFoot()
    local inventory = LocalPlayer:FindFirstChildOfClass("Backpack")
    if inventory then
        local foot = inventory:FindFirstChild("Foot")
        if foot and foot:IsA("Tool") then
            LocalPlayer.Character:WaitForChild("Humanoid"):EquipTool(foot)
        end
    end
end

local Toggle = SetTab:CreateToggle({
    Name = "Auto Equip/Unequip Weight",
    CurrentValue = false,
    Flag = "Toggle19",
    Callback = function(Value)
        getgenv().AutoEquipUnequip = Value

        task.spawn(function()
            while AutoEquipUnequip do
                equipTools()
                task.wait(10)

                unequipTools()
                task.wait(0.1)

                equipFoot()
                task.wait(0.3)

                unequipTools()
                task.wait(0.1)

                equipTools()
                task.wait(0.5)
            end
        end)
    end,
})

local Toggle = SetTab:CreateToggle({
    Name = "Auto Equip/Unequip Weight FAST ASF",
    CurrentValue = false,
    Flag = "fastequip",
    Callback = function(Value)
        getgenv().AutoEquipUnequip = Value

        task.spawn(function()
            while AutoEquipUnequip do
                equipTools()
                task.wait()

                unequipTools()
                task.wait()

                equipFoot()
                task.wait()

                unequipTools()
                task.wait()

                equipTools()
                task.wait()
            end
        end)
    end,
})

local webhookConnection = nil
local webhookGui = nil
local webhookURL = nil
local shouldSend = false

-- Helper: Format big numbers (e.g., 1.2M)
local function formatBigNumber(num)
    if num >= 1e9 then
        return string.format("%.2fB", num / 1e9)
    elseif num >= 1e6 then
        return string.format("%.2fM", num / 1e6)
    elseif num >= 1e3 then
        return string.format("%.2fK", num / 1e3)
    else
        return tostring(num)
    end
end

-- Helper: Get available HTTP request function
local function getHttpFunction()
    return (syn and syn.request) or http_request or request or (fluxus and fluxus.request) or nil
end

-- Send stats to webhook
local function sendStats()
    if not webhookURL then return end

    local http = getHttpFunction()
    if not http then
        warn("This executor does not support HTTP requests.")
        return
    end

    local player = game:GetService("Players").LocalPlayer
    local leaderstats = player:WaitForChild("leaderstats")
    local muscle = leaderstats:FindFirstChild("Muscle") and leaderstats.Muscle.Value or 0
    local stage = leaderstats:FindFirstChild("Stage") and leaderstats.Stage.Value or 0
    local username = player.Name
    local cashText = player.PlayerGui:FindFirstChild("Main_Gui") and player.PlayerGui.Main_Gui:FindFirstChild("DataMenu_Frame") and player.PlayerGui.Main_Gui.DataMenu_Frame.Cash.Status.Text or "N/A"
    local displayCash = cashText:gsub("0%.00%s*", "")

    local muscleDisplay = (muscle == 0) and "Concealed :lock:" or formatBigNumber(muscle)

    local data = {
        ["content"] = "**:bust_in_silhouette: Username:** " .. username ..
                    "\n**:muscle: Muscle Stat:** " .. muscleDisplay ..
                    "\n**:cyclone: Stage:** " .. stage ..
                    "\n**:moneybag: Cash:** " .. displayCash,
        ["username"] = "Stat Logger",
        ["avatar_url"] = "https://cdn.discordapp.com/attachments/1350798224197160982/1359693324813996072/Azuma_Logo.png"
    }

    local headers = {["Content-Type"] = "application/json"}
    local body = game:GetService("HttpService"):JSONEncode(data)

    local success, err = pcall(function()
        http({
            Url = webhookURL,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end)

    if not success then
        warn("Failed to send webhook:", err)
    else
        print("Webhook sent successfully!")
    end
end

-- Webhook timer loop (every 10 minutes)
local function startWebhookLoop()
    if webhookConnection then
        webhookConnection:Disconnect()
    end

    _G._lastSend = 0
    webhookConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if shouldSend and webhookURL and tick() - _G._lastSend >= 600 then
            _G._lastSend = tick()
            sendStats()
        end
    end)
end

-- GUI to enter webhook URL
local function createWebhookGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "WebhookInputGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    webhookGui = screenGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 400, 0, 150)
    frame.Position = UDim2.new(0.5, -200, 0.5, -75)
    frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Active = true
    frame.Draggable = true
    frame.Parent = screenGui

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = frame

    local textBox = Instance.new("TextBox")
    textBox.PlaceholderText = "Enter your Discord webhook URL"
    textBox.Size = UDim2.new(1, -40, 0, 40)
    textBox.Position = UDim2.new(0, 20, 0, 20)
    textBox.Text = ""
    textBox.TextColor3 = Color3.new(1, 1, 1)
    textBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    textBox.ClearTextOnFocus = false
    textBox.Parent = frame

    local submitButton = Instance.new("TextButton")
    submitButton.Text = "Set Webhook"
    submitButton.Size = UDim2.new(1, -40, 0, 35)
    submitButton.Position = UDim2.new(0, 20, 0, 75)
    submitButton.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    submitButton.TextColor3 = Color3.new(1, 1, 1)
    submitButton.Parent = frame

    submitButton.MouseButton1Click:Connect(function()
        if textBox.Text ~= "" then
            webhookURL = textBox.Text
            print("Webhook URL set to:", webhookURL)

            -- Executor check
            if not getHttpFunction() then
                warn("Executor does not support sending webhooks.")
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Unsupported Executor",
                    Text = "Your executor cannot send webhooks.",
                    Duration = 5
                })
                screenGui:Destroy()
                return
            end

            screenGui:Destroy()
            startWebhookLoop()
        end
    end)
end

-- TOGGLE: Enable/disable webhook logging
local Toggle = SetTab:CreateToggle({
    Name = "Enable Webhook Logger",
    CurrentValue = false,
    Flag = "WebhookToggle",
    Callback = function(Value)
        shouldSend = Value
        if shouldSend then
            createWebhookGui()
        else
            -- Stop webhook loop and clean up
            if webhookConnection then
                webhookConnection:Disconnect()
                webhookConnection = nil
            end
            if webhookGui then
                webhookGui:Destroy()
                webhookGui = nil
            end
            webhookURL = nil
        end
    end,
})


local Button = SetTab:CreateButton({
    Name = "Click to get Reborn",
    Callback = function()
        local player = game.Players.LocalPlayer
        local starterGui = game:GetService("StarterGui")
        
        -- Display fake ban message
        starterGui:SetCore("SendNotification", {
            Title = "You thought you were\nGonna get a reborn?",
            Text = "The Developers know\nWhat you're doing!",
            Duration = 3
        })
        
        -- Wait 3 seconds, then change the message
        task.wait(2)

        starterGui:SetCore("SendNotification", {
            Title = "BAN INCOMING",
            Text = "3",
            Duration = 1.1
        })

        task.wait(1.2)

        starterGui:SetCore("SendNotification", {
            Title = "BAN INCOMING",
            Text = "2",
            Duration = 1.1
        })

        task.wait(1.2)

        starterGui:SetCore("SendNotification", {
            Title = "BAN INCOMING",
            Text = "1",
            Duration = 1.1
        })

        -- Kick the player after showing the fake ban
        task.wait(1) -- Give a slight delay before kicking
        player:Kick("YOU HAVE BEEN BANNED! EXPLOITS DETECTED!")
    end,
})



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- GUI setup
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local Frame = Instance.new("Frame", ScreenGui)
Frame.Size = UDim2.new(0, 200, 0, 170)
Frame.Position = UDim2.new(0.5, -100, 0, 20)
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BackgroundTransparency = 0.2
Frame.Visible = false
Frame.Active = true
Frame.Draggable = true

local UICorner = Instance.new("UICorner", Frame)
UICorner.CornerRadius = UDim.new(0, 10)

local CurrentPlayer = Instance.new("TextLabel", Frame)
CurrentPlayer.Size = UDim2.new(0.8, 0, 0.25, 0)
CurrentPlayer.Position = UDim2.new(0.1, 0, 0.2, 0)
CurrentPlayer.BackgroundTransparency = 1
CurrentPlayer.Text = "YOU"
CurrentPlayer.TextColor3 = Color3.new(1, 1, 1)
CurrentPlayer.Font = Enum.Font.GothamBold
CurrentPlayer.TextSize = 16
CurrentPlayer.TextScaled = true
CurrentPlayer.TextWrapped = true

local PrevButton = Instance.new("TextButton", Frame)
PrevButton.Size = UDim2.new(0.25, 0, 0.25, 0)
PrevButton.Position = UDim2.new(0.12, 0, 0.55, 0)
PrevButton.Text = "<"
PrevButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
PrevButton.TextColor3 = Color3.new(1, 1, 1)
PrevButton.Font = Enum.Font.GothamBold
PrevButton.TextSize = 18

local NextButton = Instance.new("TextButton", Frame)
NextButton.Size = UDim2.new(0.25, 0, 0.25, 0)
NextButton.Position = UDim2.new(0.63, 0, 0.55, 0)
NextButton.Text = ">"
NextButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
NextButton.TextColor3 = Color3.new(1, 1, 1)
NextButton.Font = Enum.Font.GothamBold
NextButton.TextSize = 18

local TeleportButton = Instance.new("TextButton", Frame)
TeleportButton.Size = UDim2.new(0.6, 0, 0.2, 0)
TeleportButton.Position = UDim2.new(0.2, 0, 0.8, 0)
TeleportButton.Text = "Teleport"
TeleportButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
TeleportButton.TextColor3 = Color3.new(1, 1, 1)
TeleportButton.Font = Enum.Font.GothamBold
TeleportButton.TextSize = 16

-- Logic
local allPlayers = {}
local currentIndex = 0

local function updatePlayerList()
    allPlayers = Players:GetPlayers()
    table.remove(allPlayers, table.find(allPlayers, LocalPlayer) or -1)
end

local function spectatePlayer(index)
    if index == 0 then
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
            CurrentPlayer.Text = "YOU"
        end
    else
        local target = allPlayers[index]
        if target and target.Character and target.Character:FindFirstChild("Humanoid") then
            Camera.CameraSubject = target.Character.Humanoid
            CurrentPlayer.Text = (string.len(target.Name) > 15) and (string.sub(target.Name, 1, 12) .. "...") or target.Name
        end
    end
end

local function safeSpectate(index)
    updatePlayerList()
    if #allPlayers == 0 then
        currentIndex = 0
    else
        currentIndex = math.clamp(index, 0, #allPlayers)
    end
    spectatePlayer(currentIndex)
end

TeleportButton.MouseButton1Click:Connect(function()
    if currentIndex > 0 then
        local target = allPlayers[currentIndex]
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = target.Character.HumanoidRootPart
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = hrp.CFrame
            end
        end
    end
end)

PrevButton.MouseButton1Click:Connect(function()
    safeSpectate(currentIndex - 1)
end)

NextButton.MouseButton1Click:Connect(function()
    safeSpectate(currentIndex + 1)
end)

Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)

-- Integration with toggle
local Toggle = PlayerTab:CreateToggle({
    Name = "Spectate + Teleport to players",
    CurrentValue = false,
    Flag = "ToggleSpectateTeleport",
    Callback = function(Value)
        Frame.Visible = Value
        if Value then
            safeSpectate(0)
        else
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                Camera.CameraSubject = LocalPlayer.Character.Humanoid
            end
        end
    end,
})



local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- Faction Configuration
local HEROIC_FAMES = {
    "Nice Guy", "Bodyguard", "Guardian", "Saint", "Angelic", 
    "Vanquisher", "Savior", "The Watcher", "Keeper of Light",
    "Peacemaker", "Invulnerable", "Osiris", "Arch-angel",
    "Paladin", "Demigod", "Heavenly", "Emperor"
}

local NOTORIOUS_FAMES = {
    "Bully", "Jerk", "Thug", "Criminal", "Godfather",
    "Corrupted", "Hunter", "Tyrant", "Cursebearer", "Sinister",
    "Satan", "Bloodthirsty", "Arch-demon", "Asmodeus", "The Devil",
    "Undying", "Warlord", "Chaos King", "Berserker", "Nightmare",
}

-- Immunity Zones
local ImmunityZones = {
    Vector3.new(-634.5390625, -53.9104830932617, 1859.409912109371), -- original
    Vector3.new(-646.37, -53.64, 1784.42) -- new one
}
local ImmunityRadius = 20

-- Debug Mode
local DEBUG_MODE = true
local function debugPrint(message)
    if DEBUG_MODE then
        print("[DEBUG]", message)
    end
end

-- Core Functions
local function isInImmunityZone(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local pos = player.Character.HumanoidRootPart.Position
        for _, zone in pairs(ImmunityZones) do
            if (pos - zone).Magnitude <= ImmunityRadius then
                return true
            end
        end
    end
    return false
end

-- Removed the entire equipFist() function here

local function getStage(player)
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local stage = leaderstats:FindFirstChild("Stage")
        if stage then
            return stage.Value
        end
    end
    return 0
end

local function getFaction(player)
    if not player.Character then return "Neutral" end
    local head = player.Character:FindFirstChild("Head")
    if not head then return "Neutral" end
    local titleGui = head:FindFirstChild("TitleGui")
    if not titleGui then return "Neutral" end
    local fameTxt = titleGui:FindFirstChild("FameTxt")
    if not fameTxt or not fameTxt:IsA("TextLabel") then return "Neutral" end
    
    local text = string.lower(fameTxt.Text)
    for _, name in ipairs(HEROIC_FAMES) do
        if string.find(text, string.lower(name)) then
            return "Heroic"
        end
    end
    for _, name in ipairs(NOTORIOUS_FAMES) do
        if string.find(text, string.lower(name)) then
            return "Notorious"
        end
    end
    return "Neutral"
end

local function isValidTarget(myFaction, targetFaction)
    return (myFaction == "Heroic" and targetFaction == "Notorious") or
           (myFaction == "Notorious" and (targetFaction == "Heroic" or targetFaction == "Neutral"))
end

local function isTargetValid(player)
    if not player then return false end
    if not player.Character then return false end
    if not player.Character:FindFirstChild("Humanoid") then return false end
    if not player.Character:FindFirstChild("HumanoidRootPart") then return false end
    return player.Character.Humanoid.Health > 0
end

local function performAttack()
    VirtualUser:ClickButton1(Vector2.new(9e9, 9e9))
end

local function attackAndTeleportLoop()
    debugPrint("Starting combat loop...")
    
    while getgenv().AutoFarm do
        local myStage = getStage(LocalPlayer)
        local myFaction = getFaction(LocalPlayer)
        local currentTarget = nil
        
        -- TARGET SELECTION PHASE
        debugPrint("Searching for targets...")
        for _, player in pairs(Players:GetPlayers()) do
            if player == LocalPlayer then continue end
            
            if isTargetValid(player) then
                local targetStage = getStage(player)
                local targetFaction = getFaction(player)
                
                if targetStage < myStage and not isInImmunityZone(player) and isValidTarget(myFaction, targetFaction) then
                    currentTarget = player
                    debugPrint("Found target: "..player.Name.." | Stage: "..targetStage.." | Faction: "..targetFaction)
                    break
                end
            end
        end
        
        -- COMBAT PHASE
        if currentTarget then
            debugPrint("Engaging target: "..currentTarget.Name)
            local MAX_COMBAT_TIME = 8
            local combatStart = os.clock()
            
            while getgenv().AutoFarm 
                  and os.clock() - combatStart < MAX_COMBAT_TIME 
                  and isTargetValid(currentTarget) do
                
                -- Teleport to target
                local targetHRP = currentTarget.Character.HumanoidRootPart
                local myHRP = LocalPlayer.Character.HumanoidRootPart
                myHRP.CFrame = targetHRP.CFrame + Vector3.new(0, 0, 0)
                
                -- Perform attack
                performAttack()
                
                -- Check if target died
                if not isTargetValid(currentTarget) then
                    debugPrint("Target defeated!")
                    break
                end
                
                task.wait(0.05)
            end
            
            task.wait(0.5)
        else
            debugPrint("No valid targets found, waiting...")
            task.wait(1)
        end
    end
end

-- Toggle Setup
local activeLoop = nil

local ToggleAutoFarm = PlayerTab:CreateToggle({
    Name = "Auto Attack & Teleport",
    CurrentValue = false,
    Flag = "Toggle20",
    Callback = function(Value)
        getgenv().AutoFarm = Value
        if Value then
            if activeLoop then
                task.cancel(activeLoop)
            end
            activeLoop = task.spawn(attackAndTeleportLoop)
            debugPrint("Auto farming enabled")
        else
            if activeLoop then
                task.cancel(activeLoop)
                activeLoop = nil
            end
            debugPrint("Auto farming disabled")
        end
    end,
})






--TryTab

local lobbyCFrame = CFrame.new(-35.8950806, 618.64978, 1857.83167)
local lobbyLooping = false
local teleportTask

-- Define this function if it doesn't exist
local function tweenToPosition(cframe, duration)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local hrp = LocalPlayer.Character.HumanoidRootPart
    local tweenInfo = TweenInfo.new(
        duration,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.Out,
        0,
        false,
        0
    )
    
    local tween = game:GetService("TweenService"):Create(
        hrp,
        tweenInfo,
        {CFrame = cframe}
    )
    
    tween:Play()
    tween.Completed:Wait()
    return true
end

local Dropdown = TryTab:CreateDropdown({
    Name = "Select Island",
    Options = {
        "None", "Lobby", "[1] Hercules", "[2] Ares", "[3] Poseidon", "[4] Hades", "[5] Athena", "[6] Zeus",
        "[7] Cronus", "[8] Robots", "[9] Bugs", "[10] Cyber", "[11] Divinities", "[12] Egyptians",
        "[13] Hollowed", "[14] The Trial", "[15] The End"
    },
    CurrentOption = {"None"}, -- Changed to table format
    MultipleOptions = false,
    Flag = "Dropdown6",
    Callback = function(Options)
        local selectedOption = Options[1] or "None" -- Added fallback

        -- Stop any running teleport loop
        lobbyLooping = false
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end

        -- Define teleport positions
        local locations = {
            ["Lobby"] = lobbyCFrame,
            ["[1] Hercules"] = CFrame.new(1272.44,94.00,1851.11),
            ["[2] Ares"] = CFrame.new(4055.03,94.01,1815.06),
            ["[3] Poseidon"] = CFrame.new(6665.31,94.01,1902.04),
            ["[4] Hades"] = CFrame.new(9393.84, 94.01,1875.97),
            ["[5] Athena"] = CFrame.new(11798.42,94.01,1875.52),
            ["[6] Zeus"] = CFrame.new(14596.24,94.01,1904.77),
            ["[7] Cronus"] = CFrame.new(17247.50,94.01,1848.54),
            ["[8] Robots"] = CFrame.new(19979.43,94.01,1889.56),
            ["[9] Bugs"] = CFrame.new(22494.12,94.01,1858.39),
            ["[10] Cyber"] = CFrame.new(25107.67,94.01,1889.34),
            ["[11] Divinities"] = CFrame.new(27536.45,94.01,1815.89),
            ["[12] Egyptians"] = CFrame.new(30026.91,94.01,1872.04),
            ["[13] Hollowed"] = CFrame.new(32671.49, 94.01, 1852.79),
            ["[14] The Trial"] = CFrame.new(35397.16,94.01,1898.30),
            ["[15] The End"] = CFrame.new(37852.44,94.01,1875.86)
        }

        if selectedOption == "None" then
            return -- Do nothing for "None"
        elseif selectedOption == "Lobby" then
            lobbyLooping = true
            teleportTask = task.spawn(function()
                while lobbyLooping and task.wait(5) do -- Added safety check
                    pcall(function() -- Error handling
                        tweenToPosition(lobbyCFrame, 0.5)
                    end)
                end
            end)
        elseif locations[selectedOption] then
            pcall(function() -- Error handling
                tweenToPosition(locations[selectedOption], 0.8)
            end)
        end
    end,
})


local moving = false
local selectedOption = "Choose Option"
local humanoidRootPart = nil

-- Function to get the current HumanoidRootPart with safety checks
local function getHumanoidRootPart()
    local character = game.Players.LocalPlayer.Character
    if character then
        return character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")
    end
    return nil
end

-- Function to equip Foot from backpack
local function equipFoot()
    local backpack = game:GetService("Players").LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return end
    
    for _, item in ipairs(backpack:GetChildren()) do
        if item.Name:lower():find("foot") and item:IsA("Tool") then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(item)
            break
        end
    end
end

-- Function to simulate M1 click
local function clickM1()
    local virtualInput = game:GetService("VirtualInputManager")
    virtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 1)
    task.wait(0.1)
    virtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 1)
end

-- Function to handle movement and M1 clicking
local function startMovement(option, positions)
    moving = true
    equipFoot() -- Equip foot when movement starts
    
    task.spawn(function()
        while moving do
            humanoidRootPart = getHumanoidRootPart()
            if not humanoidRootPart then
                -- Wait for character to respawn
                game.Players.LocalPlayer.CharacterAdded:Wait()
                humanoidRootPart = getHumanoidRootPart()
                equipFoot() -- Re-equip foot after respawn
            end
            
            if option == "Devil" then
                humanoidRootPart.CFrame = positions.Devil1
                clickM1()
                task.wait(3)
                humanoidRootPart.CFrame = positions.Devil2
                clickM1()
                task.wait(3)
            elseif option == "Angel" then
                humanoidRootPart.CFrame = positions.Angel1
                clickM1()
                task.wait(3)
                humanoidRootPart.CFrame = positions.Angel2
                clickM1()
                task.wait(3)
            elseif option == "Middle" then
                humanoidRootPart.CFrame = positions.Middle
                clickM1()
                task.wait(3)
            end
        end
    end)
end

-- Initialize HumanoidRootPart reference
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

-- Get initial reference
if game.Players.LocalPlayer.Character then
    humanoidRootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
end

-- Hercules Dropdown
local LieutenantDropdown = TryTab:CreateDropdown({
    Name = "1st Bloodline [Hercules]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown7",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(1750, -57.5004883, 1882.00024),
                Devil2 = CFrame.new(2442, -57.5004883, 1870.00024),
                Angel1 = CFrame.new(2122.85, 4.83, 2153.45),
                Angel2 = CFrame.new(2135.10, 4.83, 1618.96),
                Middle = CFrame.new(2142, 72.96, 1886.86)
            })
        end
    end,
})

-- Ares Dropdown
local AresDropdown = TryTab:CreateDropdown({
    Name = "2nd Bloodline[Ares]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown8",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(5116, -57.5004883, 1850.00024),
                Devil2 = CFrame.new(5006, -57.5004883, 1670.00024),
                Angel1 = CFrame.new(4480.53, -66.96, 1873.10),
                Angel2 = CFrame.new(4619.06, 67.86, 2191.77),
                Middle = CFrame.new(4790.08, 72.96, 1883.74)
            })
        end
    end,
})

-- Poseidon Dropdown
local PoseidonDropdown = TryTab:CreateDropdown({
    Name = "3rd Bloodline[Poseidon]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown9",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(7258.40039, -57.5004883, 1694.07031),
                Devil2 = CFrame.new(7580, -57.5004883, 1902.0802),
                Angel1 = CFrame.new(7641.90, 113.07, 1713.49),
                Angel2 = CFrame.new(7027.47, 113.07, 1899.24),
                Middle = CFrame.new(7423.88, 116.17, 1894.63)
            })
        end
    end,
})

-- Hades Dropdown
local HadesDropdown = TryTab:CreateDropdown({
    Name = "4th Bloodline[Hades]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown1.",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(10069.1484, -57.5004883, 2283.63013),
                Devil2 = CFrame.new(9942.18848, -57.800293, 1490.21021),
                Angel1 = CFrame.new(9622.37, 112.30, 1882.91),
                Angel2 = CFrame.new(10496.92, 112.60, 1875.61),
                Middle = CFrame.new(10077.96, 130.46, 1889.09)
            })
        end
    end,
})

-- Athena Dropdown
local AthenaDropdown = TryTab:CreateDropdown({
    Name = "5th Bloodline[Athena]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown11",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(12301.7012, -57.5004883, 1887.00024),
                Devil2 = CFrame.new(12879.7617, -57.5004883, 1642.82019),
                Angel1 = CFrame.new(13082.91, 155.06, 1796.23),
                Angel2 = CFrame.new(12649.79, 155.66, 2171.43),
                Middle = CFrame.new(12711.25, 167.06, 1837.08)
            })
        end
    end,
})

-- Zeus Dropdown
local ZeusDropdown = TryTab:CreateDropdown({
    Name = "6th Bloodline[Zeus]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown12",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(15551.2803, -54.5004883, 2091.14014),
                Devil2 = CFrame.new(15097, -54.5004883, 1925.00024),
                Angel1 = CFrame.new(15654.08, 158.06, 1810.93),
                Angel2 = CFrame.new(15173.99, 158.06, 2181.33),
                Middle = CFrame.new(15343.09, 161.06, 1847.09)
            })
        end
    end,
})

-- Cronus Dropdown
local CronusDropdown = TryTab:CreateDropdown({
    Name = "7th Bloodline[Cronus]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown13",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(18350.7109, -57.6010742, 1898.51025),
                Devil2 = CFrame.new(17671.1699, -57.6547852, 1983.44019),
                Angel1 = CFrame.new(17862.35, 255.39, 1476.00),
                Angel2 = CFrame.new(17862.35, 255.39, 1476.00),
                Middle = CFrame.new(17967.72, 231.39, 1872.65)
            })
        end
    end,
})

-- Robots Dropdown
local BotsDropdown = TryTab:CreateDropdown({
    Name = "8th Bloodline[Robots]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown14",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(20583.1621, -57.6010742, 1682.76025),
                Devil2 = CFrame.new(20628, -57.6547852, 2078.58008),
                Angel1 = CFrame.new(20436.26, 301.16, 1946.15),
                Angel2 = CFrame.new(20904.26, 308.96, 1933.62),
                Middle = CFrame.new(20655.21, 227.00, 1896.29)
            })
        end
    end,
})

-- Bugs Dropdown
local BugsDropdown = TryTab:CreateDropdown({
    Name = "9th Bloodline[Bugs]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown15",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(23318.71, 692.53, 2022.52),
                Devil2 = CFrame.new(23318.71, 692.53, 2022.52),
                Angel1 = CFrame.new(23318.71, 692.53, 2022.52),
                Angel2 = CFrame.new(23318.71, 692.53, 2022.52),
                Middle = CFrame.new(23318.71, 692.53, 2022.52)
            })
        end
    end,
})

-- Cyber Dropdown
local CyberDropdown = TryTab:CreateDropdown({
    Name = "10th Bloodline[Cyber]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown16",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(25971.24, 708.20, 1999.64),
                Devil2 = CFrame.new(25971.24, 708.20, 1999.64),
                Angel1 = CFrame.new(25971.24, 708.20, 1999.64),
                Angel2 = CFrame.new(25971.24, 708.20, 1999.64),
                Middle = CFrame.new(25971.24, 708.20, 1999.64)
            })
        end
    end,
})

local CyberDropdown = TryTab:CreateDropdown({
    Name = "11th Bloodline[Divinities]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown17",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Devil2 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Angel1 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Angel2 = CFrame.new(28713.60,1434.99,2041.96
            ),
                Middle = CFrame.new(28713.60,1434.99,2041.96
            )
            })
        end
    end,
})

local CyberDropdown = TryTab:CreateDropdown({
    Name = "12th Bloodline[Egyptians]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown18",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})

local HollowedDropdown = TryTab:CreateDropdown({
    Name = "13th Bloodline[Hollowed]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown19",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})

local TTrialDropdown = TryTab:CreateDropdown({
    Name = "14th Bloodline[Trial]",
    Options = {"Choose Option", "Angel", "Devil", "Middle"},
    CurrentOption = {"Choose Option"},
    MultipleOptions = false,
    Flag = "Dropdown20",
    Callback = function(Options)
        selectedOption = Options[1]
        moving = false
        if selectedOption ~= "Choose Option" then
            startMovement(selectedOption, {
                Devil1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Devil2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel1 = CFrame.new(36425.56,985.87,2029.98
            ),
                Angel2 = CFrame.new(36425.56,985.87,2029.98
            ),
                Middle = CFrame.new(36425.56,985.87,2029.98
            )
            })
        end
    end,
})





























-- Paragraph:
local Paragraph = MiscTab:CreateParagraph({Title = "Asaiya Sell if Full", Content = "Gains muscle, and Automatically sells if FULL DNA"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Click (No Gamepass)", Content = "Normal Speed Auto Clicker"})
local Paragraph = MiscTab:CreateParagraph({Title = "Gamepass TIPS", Content = "If you use my script 24/7, you only need to get 2x COINS and 2x MUSCLE gamepasses."})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Click (Fast Clicker Gamepass)", Content = "Lifting speed is the same as having Fast Lifter Gamepass"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Sell", Content = "Every 3 seconds, muscle will sell even without going to sell circle."})
local Paragraph = MiscTab:CreateParagraph({Title = "Smart Weight", Content = "Will ONLY buy the Weight enough to get to next stage in order to save coins"})
local Paragraph = MiscTab:CreateParagraph({Title = "Buy Smart DNA", Content = "Will ONLY buy the DNA enough to get to next stage in order to save coins"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Body Alter", Content = "Auto buy new Body Alter (Stage)"})
local Paragraph = MiscTab:CreateParagraph({Title = "Bloodline Autofarm", Content = "Teleports you to the small enemies and auto stomps them so you can get bloodline points."})
local Paragraph = MiscTab:CreateParagraph({Title = "Anti AFK KICK", Content = "You will not be kicked after 20 minutes of inactivity"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Equip Weight", Content = "It will automatically Equip Your Weight so you don't get reported for surpicious actions"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Clicker", Content = "Auto Clicks your screen every 17 seconds"})
local Paragraph = MiscTab:CreateParagraph({Title = "Auto Clicker FAST", Content = "Auto Clicks your screen every milissecond"})
local Paragraph = MiscTab:CreateParagraph({Title = "White Screen", Content = "Turns your screen to white to save FPS"})
local Paragraph = MiscTab:CreateParagraph({Title = "Black Screen", Content = "Covers your ENTIRE screen With Pitch Black to save FPS"})
local Paragraph = MiscTab:CreateParagraph({Title = "Teleport to Player", Content = "Literally teleports you to the player"})
local Paragraph = MiscTab:CreateParagraph({Title = "Kill Player", Content = "Teleports to players whose stages are lower than yours"})
local Paragraph = MiscTab:CreateParagraph({Title = "Credit of the script goes to", Content = "Asaiya(Plan), Kiretsuki(Tester), Uron(Coder), and Raizel(Funds)"})
local Paragraph = MiscTab:CreateParagraph({Title = "Destroy Everything", Content = "Destroys all Mesh and non required things to save FPS"})
local Paragraph = MiscTab:CreateParagraph({Title = "True INVISIBILITY", Content = "Completely Makes your character Disappear to save FPS, Only invisible to you."})
local Paragraph = MiscTab:CreateParagraph({Title = "Freeze Position", Content = "Literally freezes your avatar, so if you're falling, you will stay in that position."})
local Paragraph = TryTab:CreateParagraph({Title = "OPTIONS", Content = "Recommended: Only turn on 1 or 2"})
local Paragraph = MainTab:CreateParagraph({Title = "Automatics", Content = "Everything here is for gaining/selling/buying Only."})
local Paragraph = PlayerTab:CreateParagraph({Title = "Player Hunt", Content = "Will Teleport to a player who is on the opposite team\n Make sure to Equip Fist/Foot."})

print("SCRIPT HAS LOADED!")

